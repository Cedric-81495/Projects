Perfect 🚀 — let’s put everything together into a Full Harry Potter Wiki App built with MERN + Tailwind. It will have CRUD (admin only), public browsing (users), and separate routes for admin and users.

🏗 Project Blueprint
📚 Features

Public (User Side):

Characters Page → filter by House, search by name.

Spells Page → searchable interactive spellbook.

Students Page → list of Hogwarts students.

Staff Page → Hogwarts staff list.

All data shown in Tailwind-styled cards.

Admin Side (Protected):

CRUD (Create, Read, Update, Delete) on:

Characters

Spells

Students

Staff

Only admins can log in & access /admin/*.

⚙️ Tech Stack

Frontend: React + Vite + TailwindCSS + React Router

Backend: Node.js + Express.js

Database: MongoDB + Mongoose

Auth: JWT-based role auth (user | admin)

API Data: Seed from HP API


backend/
├── config/                      # Environment setup
│   └── db.js                    # MongoDB connection

├── controllers/                # Route logic
│   ├── adminController.js
│   ├── authController.js
│   ├── characterController.js
│   ├── publicController.js
│   ├── spellController.js
│   ├── staffController.js
│   ├── studentController.js
│   └── superadminController.js

├── middleware/                 # Request guards and utilities
│   ├── authMiddleware.js       # protect, admin, isSuperAdmin
│   ├── rateLimiter.js          # Optional throttling
│   └── validateRequest.js      # Express-validator wrapper

├── models/                     # Mongoose schemas
│   ├── Character.js
│   ├── Spell.js
│   ├── Staff.js
│   ├── Student.js
│   └── User.js

├── routes/                     # API endpoints
│   ├── adminRoutes.js
│   ├── authRoutes.js
│   ├── characterRoutes.js
│   ├── publicRoutes.js
│   ├── registerRoutes.js
│   ├── spellRoutes.js
│   ├── staffRoutes.js
│   ├── studentRoutes.js
│   └── superadminRoutes.js

├── validators/                 # Input validation logic
│   ├── adminValidators.js
│   └── registerValidators.js

├── seeder.js                   # Optional: seed initial data
├── server.js                   # Express app entry point

├── .env                        # Environment variables
├── .env.example                # Shared template
├── package.json                # Dependencies and scripts
├── package-lock.json           # Lockfile
├── README.md                   # Project overview
├── vercel.json                 # Deployment config (if used)

frontend/
├── public/                      # Static assets (favicon, vite.svg, etc.)
│   └── output.css               # Optional fallback styles

├── dist/                        # Vite build output (auto-generated)
│   └── assets/                  # Compiled assets

├── src/                         # Source code
│
│   ├── assets/                  # Global images, logos, icons
│   │   ├── PotterWikiHeader.png
│   │   ├── divCover.png
│   │   └── react.svg
│
│   ├── components/              # Reusable UI components
│   │   ├── layout/              # Navbar.jsx, Footer.jsx, Header.jsx
│   │   ├── forms/               # LoginForm, RegisterForm, PasswordInput.jsx
│   │   ├── protected/           # AdminRoute.jsx, RoleGate.jsx
│   │   └── shared/              # Card.jsx, PageWrapper.jsx, SearchBar.jsx
│
│   ├── context/                 # Global state
│   │   ├── AuthContext.jsx
│   │   └── AuthProvider.jsx
│
│   ├── pages/                   # Route-based views
│   │   ├── Home.jsx
│   │   ├── Login.jsx
│   │   ├── Register.jsx
│   │   ├── Profile.jsx
│   │   ├── AdminDashboard.jsx   # Consider moving to admin/
│   │   ├── Characters.jsx
│   │   ├── CharacterDetail.jsx
│   │   ├── Spells.jsx
│   │   ├── SpellsDetail.jsx
│   │   ├── Students.jsx
│   │   ├── StudentsDetail.jsx
│   │   ├── Staff.jsx
│   │   ├── StaffDetail.jsx
│   │   ├── SearchBar.jsx        # Consider moving to components/shared/
│   │   ├── BackToTopButton.jsx  # Consider moving to components/shared/
│   │   └── admin/               # Admin-only views
│   │       ├── AdminCharacters.jsx
│   │       ├── AdminSpells.jsx
│   │       ├── AdminStudents.jsx
│   │       ├── AdminStaffs.jsx
│
│   ├── styles/                  # Global styles
│   │   └── index.css            # Tailwind + overrides
│
│   ├── utils/                   # Helper functions
│   │   ├── api.js               # Axios instance with token
│   │   ├── roleUtils.js         # Role checks, redirects
│   │   └── validators.js        # Form validation helpers
│
│   ├── App.jsx                  # Main layout and route config
│   ├── App.css                  # Optional scoped styles
│   └── main.jsx                 # React DOM entry point

├── .env                         # Local environment variables
├── .env.example                 # Shared env template
├── .gitignore                   # Git exclusions
├── eslint.config.js             # Linting rules
├── index.html                   # Vite entry point
├── package.json                 # Dependencies and scripts
├── package-lock.json            # Lockfile
├── postcss.config.js            # PostCSS setup
├── tailwind.config.js           # Tailwind customization
├── vercel.json                  # Deployment config
└── vite.config.js               # Vite setup
 
mkdir backend
cd backend
npm init -y
npm install express mongoose dotenv cors bcryptjs jsonwebtoken
npm install --save-dev nodemon
npm install express-async-handler

#Tailwind CLI method
npm init -y
tailwindcss.exe -i ./src/input.css -o ./src/index.css --watch 
tailwind.config.js - add with content
package.json
  "tailwind": "../tailwindcss.exe -i ./src/input.css -o ./src/index.css --watch"
src/input.css:
@tailwind base;
@tailwind components;
@tailwind utilities;

#Tailwind v3
installed  tailwindcss@3.3.3
npm install -D tailwindcss@3.3.3 postcss autoprefixer
On Windows, we removed corrupted dependencies:
Remove-Item -Recurse -Force .\node_modules
Remove-Item -Force .\package-lock.json
npm install

// frontend/postcss.config.js
export default {
  plugins: {
    '@tailwindcss/postcss': {},
    autoprefixer: {},
  },
};
// frontend/tailwind.config.js
export default {
  content: ["./index.html", "./src/**/*.{js,jsx}"],
  theme: {
    extend: {},
  },
  plugins: [],
};

index.css:
@tailwind base;
@tailwind components;
@tailwind utilities;

main.jsx:
import './index.css'


# start normally
npm start  

# auto-reload in dev mode
npm run dev  

# seed database
npm run seed  

----------------------------------------------------------------------------------------------------------------------------------------
DB Localhost
Characters	GET http://localhost:3000/api/characters
Spells	GET http://localhost:3000/api/spells
Students	GET http://localhost:3000/api/students
Staff	GET http://localhost:3000/api/staff
Auth Register	POST http://localhost:3000/api/auth/register

Auth Login	POST http://localhost:3000/api/auth/login
---------------------------------------------------------------
API Links 
All Characters:
https://hp-api.onrender.com/api/characters

Characters by House (e.g., Gryffindor):
https://hp-api.onrender.com/api/characters/house/gryffindor

All Spells:
https://hp-api.onrender.com/api/spells

All Students:
https://hp-api.onrender.com/api/characters/students

All Staff:
https://hp-api.onrender.com/api/characters/staff
Full Harry Potter Wiki App

