Perfect 🚀 — let’s put everything together into a Full Harry Potter Wiki App built with MERN + Tailwind. It will have CRUD (admin only), public browsing (users), and separate routes for admin and users.

🏗 Project Blueprint
📚 Features

Public (User Side):

Characters Page → filter by House, search by name.

Spells Page → searchable interactive spellbook.

Students Page → list of Hogwarts students.

Staff Page → Hogwarts staff list.

All data shown in Tailwind-styled cards.

Admin Side (Protected):

CRUD (Create, Read, Update, Delete) on:

Characters

Spells

Students

Staff

Only admins can log in & access /admin/*.

⚙️ Tech Stack

Frontend: React + Vite + TailwindCSS + React Router

Backend: Node.js + Express.js

Database: MongoDB + Mongoose

Auth: JWT-based role auth (user | admin)

API Data: Seed from HP API


backend/
├── controllers/
│   ├── authController.js
│   ├── adminController.js.js
│   ├── publicController.js.js
│   ├── characterController.js
│   ├── spellController.js
│   ├── studentController.js
│   └── staffController.js
│
├── models/
│   ├── User.js
│   ├── Character.js
│   ├── Spell.js
│   ├── Student.js
│   └── Staff.js
│
├── routes/
│   ├── authRoutes.js
│   ├── characterRoutes.js
│   ├── spellRoutes.js
│   ├── studentRoutes.js
│   └── staffRoutes.js
│
├── middleware/
│   ├── authMiddleware.js
│   └── roleMiddleware.js
│
├── config/
│   └── db.js
│
├── .env
├── server.js
└── package.json

frontend/
├── public/                  # Static assets (favicon, images, etc.)
│   └── index.html           # Vite entry point
├── src/
│   ├── assets/              # Fonts, global images, icons
│   ├── components/          # Reusable UI components
│   │   ├──                  # Navbar, Footer, Sidebar
│   │   └── protected/       # AdminRoute, PrivateRoute
│   ├── context/             # AuthContext, AuthProvider
│   ├── pages/               # Route-based views
│   │   ├── Home
│   │   ├── Characters
│   │   ├── Spells
│   │   ├── Students
│   │   ├── Staff
│   │   ├── Login            # Login
│   │   └── AdminDashboard   # AdminDashboard, AdminPanel
│   ├── styles/              # Global CSS, Tailwind overrides
│   │   └── index.css        # Global styles (imported in main.jsx)
│   ├── utils/               # Helper functions, constants
│   ├── App.jsx              # Main app layout and routing
│   ├── main.jsx             # React DOM entry point
├── .env                     # Environment variables
├── .env.example             # Shared env template
├── .gitignore               # Git exclusions
├── tailwind.config.js       # Tailwind customization
├── postcss.config.js        # PostCSS setup (if needed)
├── package.json             # Dependencies and scripts
└── README.md                # Project overview
 
mkdir backend
cd backend
npm init -y
npm install express mongoose dotenv cors bcryptjs jsonwebtoken
npm install --save-dev nodemon
npm install express-async-handler

#Tailwind CLI method
npm init -y
tailwindcss.exe -i ./src/input.css -o ./src/index.css --watch 
tailwind.config.js - add with content
package.json
  "tailwind": "../tailwindcss.exe -i ./src/input.css -o ./src/index.css --watch"
src/input.css:
@tailwind base;
@tailwind components;
@tailwind utilities;

#Tailwind v3
installed  tailwindcss@3.3.3
npm install -D tailwindcss@3.3.3 postcss autoprefixer
On Windows, we removed corrupted dependencies:
Remove-Item -Recurse -Force .\node_modules
Remove-Item -Force .\package-lock.json
npm install

// frontend/postcss.config.js
export default {
  plugins: {
    '@tailwindcss/postcss': {},
    autoprefixer: {},
  },
};
// frontend/tailwind.config.js
export default {
  content: ["./index.html", "./src/**/*.{js,jsx}"],
  theme: {
    extend: {},
  },
  plugins: [],
};

index.css:
@tailwind base;
@tailwind components;
@tailwind utilities;

main.jsx:
import './index.css'


# start normally
npm start  

# auto-reload in dev mode
npm run dev  

# seed database
npm run seed  

---------------------------------------------------------------

Role	Capabilities	Description
🧑‍💻 Super Admin	✅ Manage Admin Users (create/delete/edit)
✅ Perform CRON/DB population tasks
✅ Full access to all system resources	This is your top-level role — usually one or two trusted users only.
🛠️ Admin User	✅ Manage data (Spells, Characters, Students, Staff)
❌ Cannot manage other admins	Handles day-to-day content or data operations.
🙋‍♂️ Public User	✅ Read-only (depending on your app’s features)	Regular users interacting with the app.

http://localhost:3000/api/public/users - get all public users
http://localhost:3000/api/auth/register - public user and admiin just add 'role": "adminUser"
{
  "firstname": "Harry",
  "middlename": "James",
  "lastname": "Potter",
  "username": "hpotter",
  "email": "harry@hogwarts.com",
  "password": "magic123"
}


{
    "_id": "68ea243815d5235bd030c407",
    "firstname": "Harry",
    "middlename": "James",
    "lastname": "Potter",
    "username": "hpotter",
    "email": "harry@hogwarts.com",
    "role": "publicUser",
    "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY4ZWEyNDM4MTVkNTIzNWJkMDMwYzQwNyIsInJvbGUiOiJwdWJsaWNVc2VyIiwiaWF0IjoxNzYwMTc1MTYxLCJleHAiOjE3NjA3Nzk5NjF9.gThXyWmu5rfJaS9OLhNL_l_Bp8xPs4jwAfI53EdbNGE"
}

// To register admnin using existing admin

POST http://localhost:3000/api/auth/login
admin2@example.com 
admin2pass

get user token

Header:

Set user token to 

Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY4ZTYyYTYxZTFjZWE5NzcyOWVmOGFkOCIsInJvbGUiOiJhZG1pblVzZXIiLCJpYXQiOjE3NTk5MTQ1OTMsImV4cCI6MTc2MDUxOTM5M30.N4MGyHWrdnz5bk3ac9XdsjwKxCoD9-h7LFYfGu7ZkeQ

Body:

{
  "firstname": "Albus",
  "middlename": "Percival",
  "lastname": "Dumbledore",
  "username": "albusd",
  "email": "albus@hogwarts.edu",
  "password": "Phoenix123"
}

Response

{
    "_id": "68ea2edb34b698a0298e192b",
    "firstname": "Albus",
    "middlename": "Percival",
    "lastname": "Dumbledore",
    "username": "albusd",
    "email": "albus@hogwarts.edu",
    "role": "adminUser",
    "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY4ZWEyZWRiMzRiNjk4YTAyOThlMTkyYiIsInJvbGUiOiJhZG1pblVzZXIiLCJpYXQiOjE3NjAxNzc4ODMsImV4cCI6MTc2MDc4MjY4M30.gPbGk9Hgy3WI_QLB-LWZfbYz3WJz855McjoKJn8E7is"
}


----------------------------------------------------------------------------------------------------------------------------------------
DB Localhost
Characters	GET http://localhost:3000/api/characters
Spells	GET http://localhost:3000/api/spells
Students	GET http://localhost:3000/api/students
Staff	GET http://localhost:3000/api/staff
Auth Register	POST http://localhost:3000/api/auth/register

    "email": "public@example.com",
    "role": "publicUser",
    password: public123

    admin@example.com
    admin123

Auth Login	POST http://localhost:3000/api/auth/login
---------------------------------------------------------------
API Links 
All Characters:
https://hp-api.onrender.com/api/characters

Characters by House (e.g., Gryffindor):
https://hp-api.onrender.com/api/characters/house/gryffindor

All Spells:
https://hp-api.onrender.com/api/spells

All Students:
https://hp-api.onrender.com/api/characters/students

All Staff:
https://hp-api.onrender.com/api/characters/staff
Full Harry Potter Wiki App

