Step 1: Import your repository
Click on "Import Git Repository" on the Vercel dashboard
Select your "Spotify-project" repository (or click "Adjust GitHub App Permissions" if you don't see it)
Click "Import"
Step 2: Configure project settings
When the configuration screen appears:
Project Name: Keep default or choose a custom name
Framework Preset: Select "Vite" from the dropdown
Root Directory: Set to frontend (this is critical since your React app is in the frontend folder)
Build Command: Keep default (npm run build) or set to vite build if needed
Output Directory: Keep default (dist)
Install Command: Keep default (npm install)
Step 3: Environment Variables
Add these environment variables:
VITE_API_URL = Your backend URL (either your ngrok URL or a separate backend deployment)
VITE_SPOTIFY_CLIENT_ID = Your Spotify client ID
(Optional) Any other frontend environment variables you need
Step 4: Create vercel.json for React Router
Before deploying, you need to create a vercel.json file in your frontend directory:
Create a new file at frontend/vercel.json
Add this content:
ExampleJSON
{
  "rewrites": [
    { "source": "/(.*)", "destination": "/" }
  ]
}
Commit and push this file to your repository
Step 5: Deploy
Click "Deploy" and Vercel will build and deploy your frontend application.
Step 6: Backend Deployment (separate)
Since Vercel is primarily for frontend, you'll need to deploy your backend separately:
Options include Render, Railway, Heroku, or any other Node.js hosting service
Update your VITE_API_URL in Vercel to point to your deployed backend
Make sure your backend's CORS settings allow requests from your Vercel frontend domain
Step 7: Update Spotify Developer Settings
After deployment, update your Spotify Developer Dashboard:
Add your Vercel domain to the allowed redirect URIs
Update your backend's REDIRECT_URI and FRONTEND_URI environment variables
Would you like me to elaborate on any of these steps?